buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "$mc_version-$mod_version"
group = "mod.technomancer.essentials"
archivesBaseName = "essentials"

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'
//Exclude python scripts from the build
sourceSets.main.java.exclude('**/python/**')

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
	mappings channel: 'snapshot', version: "$mcp_version"

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				essentials {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				essentials {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	maven { url "http://dvs1.progwml6.com/files/maven" }
}

dependencies {
	minecraft "net.minecraftforge:forge:$mc_version-$fg_version"
	
	//Compile against APIs
	compileOnly fg.deobf("mezz.jei:jei-$mc_version:$jei_version:api")
	//Run with the full versions
	runtimeOnly fg.deobf("mezz.jei:jei-$mc_version:$jei_version")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title": "essentials",
				"Specification-Vendor": "Da_Technomancer",
				"Specification-Version": "1",
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor" :"Da_Technomancer",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

task jarSources(type:Jar){
	from sourceSets.main.allSource
	classifier = 'source'
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact reobfArtifact
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
