buildscript {
	repositories {
//		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://maven.minecraftforge.net/' }
//		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//Magic 1.17 port plugin
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

version = "$mc_version-$mod_version"
group = "mod.technomancer.essentials"
archivesBaseName = "essentials"

//compileJava.options.encoding = 'UTF-8'
//Exclude python scripts from the build
sourceSets.main.java.exclude('**/python/**')

//tasks.withType(JavaCompile) {
//	options.encoding = 'UTF-8'
//}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17' // Need this here so eclipse task generates correctly.

minecraft {
	mappings channel: "$mcp_channel", version: "$mcp_version"

	runs {
		client {
			workingDirectory project.file('run\\client')
			jvmArgs '-ea' //Enable assert keyword
			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Make patchouli work
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods {
				essentials {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run\\server')
			jvmArgs '-ea' //Enable assert keyword
			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Make patchouli work
			properties 'mixin.env.disableRefMap': 'true'

			mods {
				essentials {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
//	maven { url "https://dvs1.progwml6.com/files/maven" } //JEI
	maven { url "https://maven.blamejared.com" } //Patchouli, JEI
	maven { url "https://squiddev.cc/maven/" } //CC Tweaked

}

dependencies {
	minecraft "net.minecraftforge:forge:$mc_version-$fg_version"

	//JEI
	//Compile against APIs
	compileOnly fg.deobf("mezz.jei:jei-$jei_mc_version-common-api:$jei_version")
	compileOnly fg.deobf("mezz.jei:jei-$jei_mc_version-forge-api:$jei_version")
	//Run with the full versions
	runtimeOnly fg.deobf("mezz.jei:jei-$jei_mc_version-forge:$jei_version")
	//Patchouli
	compileOnly(fg.deobf("vazkii.patchouli:Patchouli:$patchouli_version-FORGE"))
	runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:$patchouli_version-FORGE"))
	//CC Tweaked
//	compileOnly(fg.deobf("org.squiddev:cc-tweaked-${mc_version}:${cctweaked_version}"))
//	runtimeOnly(fg.deobf("org.squiddev:cc-tweaked-${mc_version}:${cctweaked_version}"))
	compileOnly("cc.tweaked:cc-tweaked-${mc_version}-core-api:${cctweaked_version}")
	compileOnly(fg.deobf("cc.tweaked:cc-tweaked-${mc_version}-forge-api:${cctweaked_version}"))
//	runtimeOnly(fg.deobf("cc.tweaked:cc-tweaked-${mc_version}-forge:${cctweaked_version}"))
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title": "essentials",
				"Specification-Vendor": "Technomancer",
				"Specification-Version": "1",
				"Implementation-Title": project.name,
				"Implementation-Version": "${version}",
				"Implementation-Vendor" :"Technomancer",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

//Compile the sources into a jar- useful for addon development
task jarSources(type: Jar){
	from sourceSets.main.allSource
//	classifier = 'source'
	archiveClassifier.set('source')
}

task jarDev(type: Jar) {
	from sourceSets.main.output
//	classifier = 'dev'
	archiveClassifier.set('dev')
}


//// Example configuration to allow publishing using the maven-publish task
//// we define a custom artifact that is sourced from the reobfJar output task
//// and then declare that to be published
//// Note you'll need to add a repository here
//def reobfFile = file("$buildDir/reobfJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//	type 'jar'
//	builtBy 'reobfJar'
//}
//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			artifact reobfArtifact
//		}
//	}
//	repositories {
//		maven {
//			url "file:///${project.projectDir}/mcmodsrepo"
//		}
//	}
//}